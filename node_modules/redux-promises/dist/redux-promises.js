(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ReduxPromises"] = factory();
	else
		root["ReduxPromises"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ensureIdleState = exports.createMiddleware = exports.reducer = undefined;
	
	var _isPromise = __webpack_require__(1);
	
	var _isPromise2 = _interopRequireDefault(_isPromise);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SELECT_STATE = function SELECT_STATE(state) {
	  return state.idle;
	};
	var noop = function noop() {};
	
	// constants
	var CHANGE_IDLE_STATE = '@@redux-promises/CHANGE_IDLE_STATE';
	
	// actions
	var changeIdleState = function changeIdleState(state) {
	  return {
	    type: CHANGE_IDLE_STATE,
	    state: state
	  };
	};
	
	// reducers
	var reducer = function reducer() {
	  var state = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
	  var action = arguments[1];
	
	  switch (action.type) {
	    case CHANGE_IDLE_STATE:
	      return action.state;
	  }
	  return state;
	};
	
	var createMiddleware = function createMiddleware() {
	  var promises = [];
	
	  var middleware = function middleware(_ref) {
	    var dispatch = _ref.dispatch;
	    var getState = _ref.getState;
	
	    return function (next) {
	      return function (action) {
	        if (typeof action === 'function') {
	          var maybePromise = action(dispatch, getState);
	          if ((0, _isPromise2.default)(maybePromise)) {
	            (function () {
	              var promise = maybePromise.then(noop, noop);
	              promise.then(function () {
	                promises = promises.filter(function (p) {
	                  return p !== promise;
	                });
	                if (promises.length === 0) {
	                  dispatch(changeIdleState(true));
	                }
	              });
	              promises.push(promise);
	              dispatch(changeIdleState(false));
	            })();
	          }
	          return maybePromise;
	        } else {
	          return next(action);
	        }
	      };
	    };
	  };
	
	  return middleware;
	};
	
	var ensureIdleState = function ensureIdleState(store) {
	  var selectState = arguments.length <= 1 || arguments[1] === undefined ? SELECT_STATE : arguments[1];
	
	  var getIdleState = function getIdleState() {
	    return selectState(store.getState());
	  };
	
	  if ((undefined) !== 'production' && typeof getIdleState() !== 'boolean') {
	    throw new Error('Unable to get idle state, did you install the reducer ' + 'and use the correct `selectState`? (default `(state) => (state.idle)`)');
	  }
	
	  if (getIdleState()) {
	    return Promise.resolve();
	  }
	
	  return new Promise(function (resolve) {
	    var unsubscribe = store.subscribe(function () {
	      if (getIdleState()) {
	        unsubscribe();
	        resolve();
	      }
	    });
	  });
	};
	
	exports.reducer = reducer;
	exports.createMiddleware = createMiddleware;
	exports.ensureIdleState = ensureIdleState;

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }
	
	// https://github.com/then/is-promise
	
	exports.default = function (obj) {
	  return !!obj && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
	};
	
	module.exports = exports['default'];

/***/ }
/******/ ])
});
;
//# sourceMappingURL=redux-promises.js.map